/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "app/api/reddit/posts/route";
exports.ids = ["app/api/reddit/posts/route"];
exports.modules = {

/***/ "(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader/index.js?name=app%2Fapi%2Freddit%2Fposts%2Froute&page=%2Fapi%2Freddit%2Fposts%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Freddit%2Fposts%2Froute.ts&appDir=C%3A%5CUsers%5CGordo%5CDocuments%5CGitHub%5Credditresearch%5Csrc%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=C%3A%5CUsers%5CGordo%5CDocuments%5CGitHub%5Credditresearch&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!":

  !*** ./node_modules/next/dist/build/webpack/loaders/next-app-loader/index.js?name=app%2Fapi%2Freddit%2Fposts%2Froute&page=%2Fapi%2Freddit%2Fposts%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Freddit%2Fposts%2Froute.ts&appDir=C%3A%5CUsers%5CGordo%5CDocuments%5CGitHub%5Credditresearch%5Csrc%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=C%3A%5CUsers%5CGordo%5CDocuments%5CGitHub%5Credditresearch&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D! ***!

/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   patchFetch: () => (/* binding */ patchFetch),\n/* harmony export */   routeModule: () => (/* binding */ routeModule),\n/* harmony export */   serverHooks: () => (/* binding */ serverHooks),\n/* harmony export */   workAsyncStorage: () => (/* binding */ workAsyncStorage),\n/* harmony export */   workUnitAsyncStorage: () => (/* binding */ workUnitAsyncStorage)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/route-modules/app-route/module.compiled */ \"(rsc)/./node_modules/next/dist/server/route-modules/app-route/module.compiled.js\");\n/* harmony import */ var next_dist_server_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/route-kind */ \"(rsc)/./node_modules/next/dist/server/route-kind.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/server/lib/patch-fetch */ \"(rsc)/./node_modules/next/dist/server/lib/patch-fetch.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var C_Users_Gordo_Documents_GitHub_redditresearch_src_app_api_reddit_posts_route_ts__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./src/app/api/reddit/posts/route.ts */ \"(rsc)/./src/app/api/reddit/posts/route.ts\");\n\n\n\n\n// We inject the nextConfigOutput here so that we can use them in the route\n// module.\nconst nextConfigOutput = \"\"\nconst routeModule = new next_dist_server_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__.AppRouteRouteModule({\n    definition: {\n        kind: next_dist_server_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.APP_ROUTE,\n        page: \"/api/reddit/posts/route\",\n        pathname: \"/api/reddit/posts\",\n        filename: \"route\",\n        bundlePath: \"app/api/reddit/posts/route\"\n    },\n    resolvedPagePath: \"C:\\\\Users\\\\Gordo\\\\Documents\\\\GitHub\\\\redditresearch\\\\src\\\\app\\\\api\\\\reddit\\\\posts\\\\route.ts\",\n    nextConfigOutput,\n    userland: C_Users_Gordo_Documents_GitHub_redditresearch_src_app_api_reddit_posts_route_ts__WEBPACK_IMPORTED_MODULE_3__\n});\n// Pull out the exports that we need to expose from the module. This should\n// be eliminated when we've moved the other routes to the new format. These\n// are used to hook into the route.\nconst { workAsyncStorage, workUnitAsyncStorage, serverHooks } = routeModule;\nfunction patchFetch() {\n    return (0,next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__.patchFetch)({\n        workAsyncStorage,\n        workUnitAsyncStorage\n    });\n}\n\n\n//# sourceMappingURL=app-route.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2J1aWxkL3dlYnBhY2svbG9hZGVycy9uZXh0LWFwcC1sb2FkZXIvaW5kZXguanM/bmFtZT1hcHAlMkZhcGklMkZyZWRkaXQlMkZwb3N0cyUyRnJvdXRlJnBhZ2U9JTJGYXBpJTJGcmVkZGl0JTJGcG9zdHMlMkZyb3V0ZSZhcHBQYXRocz0mcGFnZVBhdGg9cHJpdmF0ZS1uZXh0LWFwcC1kaXIlMkZhcGklMkZyZWRkaXQlMkZwb3N0cyUyRnJvdXRlLnRzJmFwcERpcj1DJTNBJTVDVXNlcnMlNUNHb3JkbyU1Q0RvY3VtZW50cyU1Q0dpdEh1YiU1Q3JlZGRpdHJlc2VhcmNoJTVDc3JjJTVDYXBwJnBhZ2VFeHRlbnNpb25zPXRzeCZwYWdlRXh0ZW5zaW9ucz10cyZwYWdlRXh0ZW5zaW9ucz1qc3gmcGFnZUV4dGVuc2lvbnM9anMmcm9vdERpcj1DJTNBJTVDVXNlcnMlNUNHb3JkbyU1Q0RvY3VtZW50cyU1Q0dpdEh1YiU1Q3JlZGRpdHJlc2VhcmNoJmlzRGV2PXRydWUmdHNjb25maWdQYXRoPXRzY29uZmlnLmpzb24mYmFzZVBhdGg9JmFzc2V0UHJlZml4PSZuZXh0Q29uZmlnT3V0cHV0PSZwcmVmZXJyZWRSZWdpb249Jm1pZGRsZXdhcmVDb25maWc9ZTMwJTNEISIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7OztBQUErRjtBQUN2QztBQUNxQjtBQUMyQztBQUN4SDtBQUNBO0FBQ0E7QUFDQSx3QkFBd0IseUdBQW1CO0FBQzNDO0FBQ0EsY0FBYyxrRUFBUztBQUN2QjtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EsWUFBWTtBQUNaLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQSxRQUFRLHNEQUFzRDtBQUM5RDtBQUNBLFdBQVcsNEVBQVc7QUFDdEI7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUMwRjs7QUFFMUYiLCJzb3VyY2VzIjpbIiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBBcHBSb3V0ZVJvdXRlTW9kdWxlIH0gZnJvbSBcIm5leHQvZGlzdC9zZXJ2ZXIvcm91dGUtbW9kdWxlcy9hcHAtcm91dGUvbW9kdWxlLmNvbXBpbGVkXCI7XG5pbXBvcnQgeyBSb3V0ZUtpbmQgfSBmcm9tIFwibmV4dC9kaXN0L3NlcnZlci9yb3V0ZS1raW5kXCI7XG5pbXBvcnQgeyBwYXRjaEZldGNoIGFzIF9wYXRjaEZldGNoIH0gZnJvbSBcIm5leHQvZGlzdC9zZXJ2ZXIvbGliL3BhdGNoLWZldGNoXCI7XG5pbXBvcnQgKiBhcyB1c2VybGFuZCBmcm9tIFwiQzpcXFxcVXNlcnNcXFxcR29yZG9cXFxcRG9jdW1lbnRzXFxcXEdpdEh1YlxcXFxyZWRkaXRyZXNlYXJjaFxcXFxzcmNcXFxcYXBwXFxcXGFwaVxcXFxyZWRkaXRcXFxccG9zdHNcXFxccm91dGUudHNcIjtcbi8vIFdlIGluamVjdCB0aGUgbmV4dENvbmZpZ091dHB1dCBoZXJlIHNvIHRoYXQgd2UgY2FuIHVzZSB0aGVtIGluIHRoZSByb3V0ZVxuLy8gbW9kdWxlLlxuY29uc3QgbmV4dENvbmZpZ091dHB1dCA9IFwiXCJcbmNvbnN0IHJvdXRlTW9kdWxlID0gbmV3IEFwcFJvdXRlUm91dGVNb2R1bGUoe1xuICAgIGRlZmluaXRpb246IHtcbiAgICAgICAga2luZDogUm91dGVLaW5kLkFQUF9ST1VURSxcbiAgICAgICAgcGFnZTogXCIvYXBpL3JlZGRpdC9wb3N0cy9yb3V0ZVwiLFxuICAgICAgICBwYXRobmFtZTogXCIvYXBpL3JlZGRpdC9wb3N0c1wiLFxuICAgICAgICBmaWxlbmFtZTogXCJyb3V0ZVwiLFxuICAgICAgICBidW5kbGVQYXRoOiBcImFwcC9hcGkvcmVkZGl0L3Bvc3RzL3JvdXRlXCJcbiAgICB9LFxuICAgIHJlc29sdmVkUGFnZVBhdGg6IFwiQzpcXFxcVXNlcnNcXFxcR29yZG9cXFxcRG9jdW1lbnRzXFxcXEdpdEh1YlxcXFxyZWRkaXRyZXNlYXJjaFxcXFxzcmNcXFxcYXBwXFxcXGFwaVxcXFxyZWRkaXRcXFxccG9zdHNcXFxccm91dGUudHNcIixcbiAgICBuZXh0Q29uZmlnT3V0cHV0LFxuICAgIHVzZXJsYW5kXG59KTtcbi8vIFB1bGwgb3V0IHRoZSBleHBvcnRzIHRoYXQgd2UgbmVlZCB0byBleHBvc2UgZnJvbSB0aGUgbW9kdWxlLiBUaGlzIHNob3VsZFxuLy8gYmUgZWxpbWluYXRlZCB3aGVuIHdlJ3ZlIG1vdmVkIHRoZSBvdGhlciByb3V0ZXMgdG8gdGhlIG5ldyBmb3JtYXQuIFRoZXNlXG4vLyBhcmUgdXNlZCB0byBob29rIGludG8gdGhlIHJvdXRlLlxuY29uc3QgeyB3b3JrQXN5bmNTdG9yYWdlLCB3b3JrVW5pdEFzeW5jU3RvcmFnZSwgc2VydmVySG9va3MgfSA9IHJvdXRlTW9kdWxlO1xuZnVuY3Rpb24gcGF0Y2hGZXRjaCgpIHtcbiAgICByZXR1cm4gX3BhdGNoRmV0Y2goe1xuICAgICAgICB3b3JrQXN5bmNTdG9yYWdlLFxuICAgICAgICB3b3JrVW5pdEFzeW5jU3RvcmFnZVxuICAgIH0pO1xufVxuZXhwb3J0IHsgcm91dGVNb2R1bGUsIHdvcmtBc3luY1N0b3JhZ2UsIHdvcmtVbml0QXN5bmNTdG9yYWdlLCBzZXJ2ZXJIb29rcywgcGF0Y2hGZXRjaCwgIH07XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWFwcC1yb3V0ZS5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader/index.js?name=app%2Fapi%2Freddit%2Fposts%2Froute&page=%2Fapi%2Freddit%2Fposts%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Freddit%2Fposts%2Froute.ts&appDir=C%3A%5CUsers%5CGordo%5CDocuments%5CGitHub%5Credditresearch%5Csrc%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=C%3A%5CUsers%5CGordo%5CDocuments%5CGitHub%5Credditresearch&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!\n");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?server=true!":
/*!******************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?server=true! ***!
  \******************************************************************************************************/
/***/ (() => {



/***/ }),

/***/ "(rsc)/./src/app/api/reddit/posts/route.ts":
/*!*******************************************!*\
  !*** ./src/app/api/reddit/posts/route.ts ***!
  \*******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   GET: () => (/* binding */ GET),\n/* harmony export */   POST: () => (/* binding */ POST)\n/* harmony export */ });\n/* harmony import */ var next_server__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/server */ \"(rsc)/./node_modules/next/dist/api/server.js\");\n/* harmony import */ var _lib_reddit_service__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @/lib/reddit/service */ \"(rsc)/./src/lib/reddit/service.ts\");\n/* harmony import */ var _lib_api_logger__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @/lib/api/logger */ \"(rsc)/./src/lib/api/logger.ts\");\n/* harmony import */ var _supabase_auth_helpers_nextjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @supabase/auth-helpers-nextjs */ \"(rsc)/./node_modules/@supabase/auth-helpers-nextjs/dist/index.js\");\n/* harmony import */ var _supabase_auth_helpers_nextjs__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_supabase_auth_helpers_nextjs__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var next_headers__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! next/headers */ \"(rsc)/./node_modules/next/dist/api/headers.js\");\n/* harmony import */ var _lib_reddit_client__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @/lib/reddit/client */ \"(rsc)/./src/lib/reddit/client.ts\");\n/* harmony import */ var zod__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! zod */ \"(rsc)/../../../node_modules/zod/lib/index.mjs\");\n\n\n\n\n\n\n\nconst logger = _lib_api_logger__WEBPACK_IMPORTED_MODULE_2__.Logger.getInstance();\nconst redditService = new _lib_reddit_service__WEBPACK_IMPORTED_MODULE_1__.RedditService();\nconst querySchema = zod__WEBPACK_IMPORTED_MODULE_6__.z.object({\n    sort: zod__WEBPACK_IMPORTED_MODULE_6__.z.enum([\n        'hot',\n        'new',\n        'top',\n        'rising'\n    ]).default('hot'),\n    limit: zod__WEBPACK_IMPORTED_MODULE_6__.z.coerce.number().min(1).max(100).default(10),\n    skip: zod__WEBPACK_IMPORTED_MODULE_6__.z.coerce.number().min(0).default(0),\n    subreddit: zod__WEBPACK_IMPORTED_MODULE_6__.z.string().optional()\n});\nasync function GET(request) {\n    try {\n        const { searchParams } = new URL(request.url);\n        const validatedParams = querySchema.parse({\n            sort: searchParams.get('sort'),\n            limit: searchParams.get('limit'),\n            skip: searchParams.get('skip'),\n            subreddit: searchParams.get('subreddit')\n        });\n        const reddit = await (0,_lib_reddit_client__WEBPACK_IMPORTED_MODULE_5__.getRedditClient)();\n        let posts;\n        if (validatedParams.subreddit) {\n            // If subreddit is specified, fetch from that subreddit\n            posts = await reddit.getSubredditPosts(validatedParams.subreddit, validatedParams.sort, validatedParams.limit, validatedParams.skip);\n        } else {\n            // Otherwise fetch from r/all\n            posts = await reddit.getPosts(validatedParams.sort, validatedParams.limit, validatedParams.skip);\n        }\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            data: posts,\n            metadata: {\n                limit: validatedParams.limit,\n                skip: validatedParams.skip,\n                sort: validatedParams.sort,\n                subreddit: validatedParams.subreddit\n            }\n        });\n    } catch (error) {\n        console.error('Failed to fetch Reddit posts:', error);\n        if (error instanceof zod__WEBPACK_IMPORTED_MODULE_6__.z.ZodError) {\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                error: 'Invalid request parameters',\n                details: error.errors\n            }, {\n                status: 400\n            });\n        }\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            error: 'Failed to fetch Reddit posts'\n        }, {\n            status: 500\n        });\n    }\n}\nasync function POST(request) {\n    try {\n        // Initialize Supabase client\n        const supabase = (0,_supabase_auth_helpers_nextjs__WEBPACK_IMPORTED_MODULE_3__.createRouteHandlerClient)({\n            cookies: next_headers__WEBPACK_IMPORTED_MODULE_4__.cookies\n        });\n        // Get session and require authentication for POST\n        const { data: { session } } = await supabase.auth.getSession();\n        if (!session) {\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                error: 'Unauthorized'\n            }, {\n                status: 401\n            });\n        }\n        const body = await request.json();\n        const { postId, commentSort, commentLimit } = body;\n        if (!postId) {\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                error: 'Post ID is required'\n            }, {\n                status: 400\n            });\n        }\n        // Log post request\n        logger.info('Reddit post fetch request', {\n            user: session.user.email,\n            postId,\n            commentSort,\n            commentLimit\n        });\n        const data = await redditService.fetchAndStorePostWithComments(postId, commentSort, commentLimit);\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            data\n        });\n    } catch (error) {\n        logger.error('Error in Reddit posts API route', {\n            error\n        });\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            error: error instanceof Error ? error.message : 'Failed to fetch Reddit post and comments',\n            code: error instanceof Error ? error.name : 'UNKNOWN_ERROR'\n        }, {\n            status: 500\n        });\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./src/app/api/reddit/posts/route.ts\n");

/***/ }),

/***/ "(rsc)/./src/lib/api/core.ts":
/*!*****************************!*\
  !*** ./src/lib/api/core.ts ***!
  \*****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   APIClient: () => (/* binding */ APIClient),\n/* harmony export */   APIError: () => (/* binding */ APIError)\n/* harmony export */ });\n// API Error Types\nclass APIError extends Error {\n    constructor(message, status, code){\n        super(message), this.status = status, this.code = code;\n        this.name = 'APIError';\n    }\n}\n// Default configuration\nconst DEFAULT_CONFIG = {\n    timeout: 30000,\n    rateLimit: {\n        maxRequests: 100,\n        windowMs: 60000 // 1 minute\n    }\n};\nclass APIClient {\n    constructor(config = {}){\n        this.requestCount = 0;\n        this.lastReset = Date.now();\n        this.config = {\n            ...DEFAULT_CONFIG,\n            ...config\n        };\n    }\n    async checkRateLimit() {\n        const now = Date.now();\n        const { maxRequests, windowMs } = this.config.rateLimit;\n        if (now - this.lastReset > windowMs) {\n            this.requestCount = 0;\n            this.lastReset = now;\n        }\n        if (this.requestCount >= maxRequests) {\n            throw new APIError('Rate limit exceeded', 429, 'RATE_LIMIT_EXCEEDED');\n        }\n        this.requestCount++;\n    }\n    async handleResponse(response) {\n        if (!response.ok) {\n            throw new APIError(response.statusText, response.status, 'API_ERROR');\n        }\n        const data = await response.json();\n        return {\n            data\n        };\n    }\n    async request(method, url, options = {}) {\n        try {\n            await this.checkRateLimit();\n            const response = await fetch(url, {\n                method,\n                headers: {\n                    'Content-Type': 'application/json',\n                    ...options.headers\n                },\n                ...options\n            });\n            return await this.handleResponse(response);\n        } catch (error) {\n            if (error instanceof APIError) {\n                throw error;\n            }\n            throw new APIError(error instanceof Error ? error.message : 'Unknown error occurred', 500, 'INTERNAL_ERROR');\n        }\n    }\n    async get(url, options) {\n        return this.request('GET', url, options);\n    }\n    async post(url, data, options) {\n        return this.request('POST', url, {\n            ...options,\n            body: JSON.stringify(data)\n        });\n    }\n    async put(url, data, options) {\n        return this.request('PUT', url, {\n            ...options,\n            body: JSON.stringify(data)\n        });\n    }\n    async delete(url, options) {\n        return this.request('DELETE', url, options);\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9zcmMvbGliL2FwaS9jb3JlLnRzIiwibWFwcGluZ3MiOiI7Ozs7O0FBRUEsa0JBQWtCO0FBQ1gsTUFBTUEsaUJBQWlCQztJQUM1QkMsWUFDRUMsT0FBZSxFQUNmLE1BQXFCLEVBQ3JCLElBQW1CLENBQ25CO1FBQ0EsS0FBSyxDQUFDQSxlQUhDQyxTQUFBQSxhQUNBQyxPQUFBQTtRQUdQLElBQUksQ0FBQ0MsSUFBSSxHQUFHO0lBQ2Q7QUFDRjtBQXlCQSx3QkFBd0I7QUFDeEIsTUFBTUMsaUJBQWtDO0lBQ3RDQyxTQUFTO0lBQ1RDLFdBQVc7UUFDVEMsYUFBYTtRQUNiQyxVQUFVLE1BQU0sV0FBVztJQUM3QjtBQUNGO0FBRU8sTUFBTUM7SUFLWFYsWUFBWVcsU0FBbUMsQ0FBQyxDQUFDLENBQUU7YUFIM0NDLGVBQXVCO2FBQ3ZCQyxZQUFvQkMsS0FBS0MsR0FBRztRQUdsQyxJQUFJLENBQUNKLE1BQU0sR0FBRztZQUFFLEdBQUdOLGNBQWM7WUFBRSxHQUFHTSxNQUFNO1FBQUM7SUFDL0M7SUFFQSxNQUFjSyxpQkFBaUI7UUFDN0IsTUFBTUQsTUFBTUQsS0FBS0MsR0FBRztRQUNwQixNQUFNLEVBQUVQLFdBQVcsRUFBRUMsUUFBUSxFQUFFLEdBQUcsSUFBSSxDQUFDRSxNQUFNLENBQUNKLFNBQVM7UUFFdkQsSUFBSVEsTUFBTSxJQUFJLENBQUNGLFNBQVMsR0FBR0osVUFBVTtZQUNuQyxJQUFJLENBQUNHLFlBQVksR0FBRztZQUNwQixJQUFJLENBQUNDLFNBQVMsR0FBR0U7UUFDbkI7UUFFQSxJQUFJLElBQUksQ0FBQ0gsWUFBWSxJQUFJSixhQUFhO1lBQ3BDLE1BQU0sSUFBSVYsU0FDUix1QkFDQSxLQUNBO1FBRUo7UUFFQSxJQUFJLENBQUNjLFlBQVk7SUFDbkI7SUFFQSxNQUFjSyxlQUFrQkMsUUFBa0IsRUFBMkI7UUFDM0UsSUFBSSxDQUFDQSxTQUFTQyxFQUFFLEVBQUU7WUFDaEIsTUFBTSxJQUFJckIsU0FDUm9CLFNBQVNFLFVBQVUsRUFDbkJGLFNBQVNoQixNQUFNLEVBQ2Y7UUFFSjtRQUVBLE1BQU1tQixPQUFPLE1BQU1ILFNBQVNJLElBQUk7UUFDaEMsT0FBTztZQUFFRDtRQUFLO0lBQ2hCO0lBRUEsTUFBYUUsUUFDWEMsTUFBYyxFQUNkQyxHQUFXLEVBQ1hDLFVBQXVCLENBQUMsQ0FBQyxFQUNBO1FBQ3pCLElBQUk7WUFDRixNQUFNLElBQUksQ0FBQ1YsY0FBYztZQUV6QixNQUFNRSxXQUFXLE1BQU1TLE1BQU1GLEtBQUs7Z0JBQ2hDRDtnQkFDQUksU0FBUztvQkFDUCxnQkFBZ0I7b0JBQ2hCLEdBQUdGLFFBQVFFLE9BQU87Z0JBQ3BCO2dCQUNBLEdBQUdGLE9BQU87WUFDWjtZQUVBLE9BQU8sTUFBTSxJQUFJLENBQUNULGNBQWMsQ0FBSUM7UUFDdEMsRUFBRSxPQUFPVyxPQUFPO1lBQ2QsSUFBSUEsaUJBQWlCL0IsVUFBVTtnQkFDN0IsTUFBTStCO1lBQ1I7WUFFQSxNQUFNLElBQUkvQixTQUNSK0IsaUJBQWlCOUIsUUFBUThCLE1BQU01QixPQUFPLEdBQUcsMEJBQ3pDLEtBQ0E7UUFFSjtJQUNGO0lBRUEsTUFBYTZCLElBQU9MLEdBQVcsRUFBRUMsT0FBcUIsRUFBMkI7UUFDL0UsT0FBTyxJQUFJLENBQUNILE9BQU8sQ0FBSSxPQUFPRSxLQUFLQztJQUNyQztJQUVBLE1BQWFLLEtBQVFOLEdBQVcsRUFBRUosSUFBVSxFQUFFSyxPQUFxQixFQUEyQjtRQUM1RixPQUFPLElBQUksQ0FBQ0gsT0FBTyxDQUFJLFFBQVFFLEtBQUs7WUFDbEMsR0FBR0MsT0FBTztZQUNWTSxNQUFNQyxLQUFLQyxTQUFTLENBQUNiO1FBQ3ZCO0lBQ0Y7SUFFQSxNQUFhYyxJQUFPVixHQUFXLEVBQUVKLElBQVUsRUFBRUssT0FBcUIsRUFBMkI7UUFDM0YsT0FBTyxJQUFJLENBQUNILE9BQU8sQ0FBSSxPQUFPRSxLQUFLO1lBQ2pDLEdBQUdDLE9BQU87WUFDVk0sTUFBTUMsS0FBS0MsU0FBUyxDQUFDYjtRQUN2QjtJQUNGO0lBRUEsTUFBYWUsT0FBVVgsR0FBVyxFQUFFQyxPQUFxQixFQUEyQjtRQUNsRixPQUFPLElBQUksQ0FBQ0gsT0FBTyxDQUFJLFVBQVVFLEtBQUtDO0lBQ3hDO0FBQ0YiLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcR29yZG9cXERvY3VtZW50c1xcR2l0SHViXFxyZWRkaXRyZXNlYXJjaFxcc3JjXFxsaWJcXGFwaVxcY29yZS50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBjcmVhdGVDbGllbnQgfSBmcm9tICdAc3VwYWJhc2Uvc3VwYWJhc2UtanMnXHJcblxyXG4vLyBBUEkgRXJyb3IgVHlwZXNcclxuZXhwb3J0IGNsYXNzIEFQSUVycm9yIGV4dGVuZHMgRXJyb3Ige1xyXG4gIGNvbnN0cnVjdG9yKFxyXG4gICAgbWVzc2FnZTogc3RyaW5nLFxyXG4gICAgcHVibGljIHN0YXR1czogbnVtYmVyLFxyXG4gICAgcHVibGljIGNvZGU6IHN0cmluZ1xyXG4gICkge1xyXG4gICAgc3VwZXIobWVzc2FnZSlcclxuICAgIHRoaXMubmFtZSA9ICdBUElFcnJvcidcclxuICB9XHJcbn1cclxuXHJcbi8vIEFQSSBSZXNwb25zZSBUeXBlc1xyXG5leHBvcnQgaW50ZXJmYWNlIEFQSVJlc3BvbnNlPFQ+IHtcclxuICBkYXRhPzogVFxyXG4gIGVycm9yPzoge1xyXG4gICAgbWVzc2FnZTogc3RyaW5nXHJcbiAgICBjb2RlOiBzdHJpbmdcclxuICAgIHN0YXR1czogbnVtYmVyXHJcbiAgfVxyXG59XHJcblxyXG4vLyBSYXRlIExpbWl0aW5nIFR5cGVzXHJcbmV4cG9ydCBpbnRlcmZhY2UgUmF0ZUxpbWl0Q29uZmlnIHtcclxuICBtYXhSZXF1ZXN0czogbnVtYmVyXHJcbiAgd2luZG93TXM6IG51bWJlclxyXG59XHJcblxyXG4vLyBBUEkgQ2xpZW50IENvbmZpZ3VyYXRpb25cclxuZXhwb3J0IGludGVyZmFjZSBBUElDbGllbnRDb25maWcge1xyXG4gIGJhc2VVUkw/OiBzdHJpbmdcclxuICByYXRlTGltaXQ/OiBSYXRlTGltaXRDb25maWdcclxuICB0aW1lb3V0PzogbnVtYmVyXHJcbn1cclxuXHJcbi8vIERlZmF1bHQgY29uZmlndXJhdGlvblxyXG5jb25zdCBERUZBVUxUX0NPTkZJRzogQVBJQ2xpZW50Q29uZmlnID0ge1xyXG4gIHRpbWVvdXQ6IDMwMDAwLCAvLyAzMCBzZWNvbmRzXHJcbiAgcmF0ZUxpbWl0OiB7XHJcbiAgICBtYXhSZXF1ZXN0czogMTAwLFxyXG4gICAgd2luZG93TXM6IDYwMDAwIC8vIDEgbWludXRlXHJcbiAgfVxyXG59XHJcblxyXG5leHBvcnQgY2xhc3MgQVBJQ2xpZW50IHtcclxuICBwcml2YXRlIGNvbmZpZzogQVBJQ2xpZW50Q29uZmlnXHJcbiAgcHJpdmF0ZSByZXF1ZXN0Q291bnQ6IG51bWJlciA9IDBcclxuICBwcml2YXRlIGxhc3RSZXNldDogbnVtYmVyID0gRGF0ZS5ub3coKVxyXG5cclxuICBjb25zdHJ1Y3Rvcihjb25maWc6IFBhcnRpYWw8QVBJQ2xpZW50Q29uZmlnPiA9IHt9KSB7XHJcbiAgICB0aGlzLmNvbmZpZyA9IHsgLi4uREVGQVVMVF9DT05GSUcsIC4uLmNvbmZpZyB9XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIGFzeW5jIGNoZWNrUmF0ZUxpbWl0KCkge1xyXG4gICAgY29uc3Qgbm93ID0gRGF0ZS5ub3coKVxyXG4gICAgY29uc3QgeyBtYXhSZXF1ZXN0cywgd2luZG93TXMgfSA9IHRoaXMuY29uZmlnLnJhdGVMaW1pdCFcclxuXHJcbiAgICBpZiAobm93IC0gdGhpcy5sYXN0UmVzZXQgPiB3aW5kb3dNcykge1xyXG4gICAgICB0aGlzLnJlcXVlc3RDb3VudCA9IDBcclxuICAgICAgdGhpcy5sYXN0UmVzZXQgPSBub3dcclxuICAgIH1cclxuXHJcbiAgICBpZiAodGhpcy5yZXF1ZXN0Q291bnQgPj0gbWF4UmVxdWVzdHMpIHtcclxuICAgICAgdGhyb3cgbmV3IEFQSUVycm9yKFxyXG4gICAgICAgICdSYXRlIGxpbWl0IGV4Y2VlZGVkJyxcclxuICAgICAgICA0MjksXHJcbiAgICAgICAgJ1JBVEVfTElNSVRfRVhDRUVERUQnXHJcbiAgICAgIClcclxuICAgIH1cclxuXHJcbiAgICB0aGlzLnJlcXVlc3RDb3VudCsrXHJcbiAgfVxyXG5cclxuICBwcml2YXRlIGFzeW5jIGhhbmRsZVJlc3BvbnNlPFQ+KHJlc3BvbnNlOiBSZXNwb25zZSk6IFByb21pc2U8QVBJUmVzcG9uc2U8VD4+IHtcclxuICAgIGlmICghcmVzcG9uc2Uub2spIHtcclxuICAgICAgdGhyb3cgbmV3IEFQSUVycm9yKFxyXG4gICAgICAgIHJlc3BvbnNlLnN0YXR1c1RleHQsXHJcbiAgICAgICAgcmVzcG9uc2Uuc3RhdHVzLFxyXG4gICAgICAgICdBUElfRVJST1InXHJcbiAgICAgIClcclxuICAgIH1cclxuXHJcbiAgICBjb25zdCBkYXRhID0gYXdhaXQgcmVzcG9uc2UuanNvbigpXHJcbiAgICByZXR1cm4geyBkYXRhIH1cclxuICB9XHJcblxyXG4gIHB1YmxpYyBhc3luYyByZXF1ZXN0PFQ+KFxyXG4gICAgbWV0aG9kOiBzdHJpbmcsXHJcbiAgICB1cmw6IHN0cmluZyxcclxuICAgIG9wdGlvbnM6IFJlcXVlc3RJbml0ID0ge31cclxuICApOiBQcm9taXNlPEFQSVJlc3BvbnNlPFQ+PiB7XHJcbiAgICB0cnkge1xyXG4gICAgICBhd2FpdCB0aGlzLmNoZWNrUmF0ZUxpbWl0KClcclxuXHJcbiAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgZmV0Y2godXJsLCB7XHJcbiAgICAgICAgbWV0aG9kLFxyXG4gICAgICAgIGhlYWRlcnM6IHtcclxuICAgICAgICAgICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24vanNvbicsXHJcbiAgICAgICAgICAuLi5vcHRpb25zLmhlYWRlcnMsXHJcbiAgICAgICAgfSxcclxuICAgICAgICAuLi5vcHRpb25zLFxyXG4gICAgICB9KVxyXG5cclxuICAgICAgcmV0dXJuIGF3YWl0IHRoaXMuaGFuZGxlUmVzcG9uc2U8VD4ocmVzcG9uc2UpXHJcbiAgICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgICBpZiAoZXJyb3IgaW5zdGFuY2VvZiBBUElFcnJvcikge1xyXG4gICAgICAgIHRocm93IGVycm9yXHJcbiAgICAgIH1cclxuXHJcbiAgICAgIHRocm93IG5ldyBBUElFcnJvcihcclxuICAgICAgICBlcnJvciBpbnN0YW5jZW9mIEVycm9yID8gZXJyb3IubWVzc2FnZSA6ICdVbmtub3duIGVycm9yIG9jY3VycmVkJyxcclxuICAgICAgICA1MDAsXHJcbiAgICAgICAgJ0lOVEVSTkFMX0VSUk9SJ1xyXG4gICAgICApXHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgYXN5bmMgZ2V0PFQ+KHVybDogc3RyaW5nLCBvcHRpb25zPzogUmVxdWVzdEluaXQpOiBQcm9taXNlPEFQSVJlc3BvbnNlPFQ+PiB7XHJcbiAgICByZXR1cm4gdGhpcy5yZXF1ZXN0PFQ+KCdHRVQnLCB1cmwsIG9wdGlvbnMpXHJcbiAgfVxyXG5cclxuICBwdWJsaWMgYXN5bmMgcG9zdDxUPih1cmw6IHN0cmluZywgZGF0YT86IGFueSwgb3B0aW9ucz86IFJlcXVlc3RJbml0KTogUHJvbWlzZTxBUElSZXNwb25zZTxUPj4ge1xyXG4gICAgcmV0dXJuIHRoaXMucmVxdWVzdDxUPignUE9TVCcsIHVybCwge1xyXG4gICAgICAuLi5vcHRpb25zLFxyXG4gICAgICBib2R5OiBKU09OLnN0cmluZ2lmeShkYXRhKSxcclxuICAgIH0pXHJcbiAgfVxyXG5cclxuICBwdWJsaWMgYXN5bmMgcHV0PFQ+KHVybDogc3RyaW5nLCBkYXRhPzogYW55LCBvcHRpb25zPzogUmVxdWVzdEluaXQpOiBQcm9taXNlPEFQSVJlc3BvbnNlPFQ+PiB7XHJcbiAgICByZXR1cm4gdGhpcy5yZXF1ZXN0PFQ+KCdQVVQnLCB1cmwsIHtcclxuICAgICAgLi4ub3B0aW9ucyxcclxuICAgICAgYm9keTogSlNPTi5zdHJpbmdpZnkoZGF0YSksXHJcbiAgICB9KVxyXG4gIH1cclxuXHJcbiAgcHVibGljIGFzeW5jIGRlbGV0ZTxUPih1cmw6IHN0cmluZywgb3B0aW9ucz86IFJlcXVlc3RJbml0KTogUHJvbWlzZTxBUElSZXNwb25zZTxUPj4ge1xyXG4gICAgcmV0dXJuIHRoaXMucmVxdWVzdDxUPignREVMRVRFJywgdXJsLCBvcHRpb25zKVxyXG4gIH1cclxufSAiXSwibmFtZXMiOlsiQVBJRXJyb3IiLCJFcnJvciIsImNvbnN0cnVjdG9yIiwibWVzc2FnZSIsInN0YXR1cyIsImNvZGUiLCJuYW1lIiwiREVGQVVMVF9DT05GSUciLCJ0aW1lb3V0IiwicmF0ZUxpbWl0IiwibWF4UmVxdWVzdHMiLCJ3aW5kb3dNcyIsIkFQSUNsaWVudCIsImNvbmZpZyIsInJlcXVlc3RDb3VudCIsImxhc3RSZXNldCIsIkRhdGUiLCJub3ciLCJjaGVja1JhdGVMaW1pdCIsImhhbmRsZVJlc3BvbnNlIiwicmVzcG9uc2UiLCJvayIsInN0YXR1c1RleHQiLCJkYXRhIiwianNvbiIsInJlcXVlc3QiLCJtZXRob2QiLCJ1cmwiLCJvcHRpb25zIiwiZmV0Y2giLCJoZWFkZXJzIiwiZXJyb3IiLCJnZXQiLCJwb3N0IiwiYm9keSIsIkpTT04iLCJzdHJpbmdpZnkiLCJwdXQiLCJkZWxldGUiXSwiaWdub3JlTGlzdCI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./src/lib/api/core.ts\n");

/***/ }),

/***/ "(rsc)/./src/lib/api/index.ts":
/*!******************************!*\
  !*** ./src/lib/api/index.ts ***!
  \******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   APIClient: () => (/* reexport safe */ _core__WEBPACK_IMPORTED_MODULE_0__.APIClient),\n/* harmony export */   APIError: () => (/* reexport safe */ _core__WEBPACK_IMPORTED_MODULE_0__.APIError),\n/* harmony export */   LogLevel: () => (/* reexport safe */ _logger__WEBPACK_IMPORTED_MODULE_1__.LogLevel),\n/* harmony export */   Logger: () => (/* reexport safe */ _logger__WEBPACK_IMPORTED_MODULE_1__.Logger),\n/* harmony export */   api: () => (/* binding */ api)\n/* harmony export */ });\n/* harmony import */ var _core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./core */ \"(rsc)/./src/lib/api/core.ts\");\n/* harmony import */ var _logger__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./logger */ \"(rsc)/./src/lib/api/logger.ts\");\n\n\n// Initialize logger\nconst logger = _logger__WEBPACK_IMPORTED_MODULE_1__.Logger.getInstance();\n// Create API client instance with logging\nclass LoggedAPIClient extends _core__WEBPACK_IMPORTED_MODULE_0__.APIClient {\n    constructor(config = {}){\n        super(config);\n    }\n    async request(method, url, options = {}) {\n        logger.info(`API Request: ${method} ${url}`, {\n            options\n        });\n        try {\n            const response = await super.request(method, url, options);\n            logger.debug(`API Response: ${method} ${url}`, {\n                response\n            });\n            return response;\n        } catch (error) {\n            logger.error(`API Error: ${method} ${url}`, {\n                error\n            });\n            throw error;\n        }\n    }\n}\n// Create and export API instance\nconst api = new LoggedAPIClient({\n    rateLimit: {\n        maxRequests: 100,\n        windowMs: 60000 // 1 minute\n    }\n});\n// Export types\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9zcmMvbGliL2FwaS9pbmRleC50cyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7O0FBQW1EO0FBQ2xCO0FBRWpDLG9CQUFvQjtBQUNwQixNQUFNRSxTQUFTRCwyQ0FBTUEsQ0FBQ0UsV0FBVztBQUVqQywwQ0FBMEM7QUFDMUMsTUFBTUMsd0JBQXdCSiw0Q0FBU0E7SUFDckNLLFlBQVlDLFNBQW1DLENBQUMsQ0FBQyxDQUFFO1FBQ2pELEtBQUssQ0FBQ0E7SUFDUjtJQUVBLE1BQWFDLFFBQ1hDLE1BQWMsRUFDZEMsR0FBVyxFQUNYQyxVQUF1QixDQUFDLENBQUMsRUFDekI7UUFDQVIsT0FBT1MsSUFBSSxDQUFDLENBQUMsYUFBYSxFQUFFSCxPQUFPLENBQUMsRUFBRUMsS0FBSyxFQUFFO1lBQUVDO1FBQVE7UUFFdkQsSUFBSTtZQUNGLE1BQU1FLFdBQVcsTUFBTSxLQUFLLENBQUNMLFFBQVdDLFFBQVFDLEtBQUtDO1lBQ3JEUixPQUFPVyxLQUFLLENBQUMsQ0FBQyxjQUFjLEVBQUVMLE9BQU8sQ0FBQyxFQUFFQyxLQUFLLEVBQUU7Z0JBQUVHO1lBQVM7WUFDMUQsT0FBT0E7UUFDVCxFQUFFLE9BQU9FLE9BQU87WUFDZFosT0FBT1ksS0FBSyxDQUFDLENBQUMsV0FBVyxFQUFFTixPQUFPLENBQUMsRUFBRUMsS0FBSyxFQUFFO2dCQUFFSztZQUFNO1lBQ3BELE1BQU1BO1FBQ1I7SUFDRjtBQUNGO0FBRUEsaUNBQWlDO0FBQzFCLE1BQU1DLE1BQU0sSUFBSVgsZ0JBQWdCO0lBQ3JDWSxXQUFXO1FBQ1RDLGFBQWE7UUFDYkMsVUFBVSxNQUFNLFdBQVc7SUFDN0I7QUFDRixHQUFFO0FBRUYsZUFBZTtBQUNPO0FBQ0UiLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcR29yZG9cXERvY3VtZW50c1xcR2l0SHViXFxyZWRkaXRyZXNlYXJjaFxcc3JjXFxsaWJcXGFwaVxcaW5kZXgudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQVBJQ2xpZW50LCBBUElDbGllbnRDb25maWcgfSBmcm9tICcuL2NvcmUnXHJcbmltcG9ydCB7IExvZ2dlciB9IGZyb20gJy4vbG9nZ2VyJ1xyXG5cclxuLy8gSW5pdGlhbGl6ZSBsb2dnZXJcclxuY29uc3QgbG9nZ2VyID0gTG9nZ2VyLmdldEluc3RhbmNlKClcclxuXHJcbi8vIENyZWF0ZSBBUEkgY2xpZW50IGluc3RhbmNlIHdpdGggbG9nZ2luZ1xyXG5jbGFzcyBMb2dnZWRBUElDbGllbnQgZXh0ZW5kcyBBUElDbGllbnQge1xyXG4gIGNvbnN0cnVjdG9yKGNvbmZpZzogUGFydGlhbDxBUElDbGllbnRDb25maWc+ID0ge30pIHtcclxuICAgIHN1cGVyKGNvbmZpZylcclxuICB9XHJcblxyXG4gIHB1YmxpYyBhc3luYyByZXF1ZXN0PFQ+KFxyXG4gICAgbWV0aG9kOiBzdHJpbmcsXHJcbiAgICB1cmw6IHN0cmluZyxcclxuICAgIG9wdGlvbnM6IFJlcXVlc3RJbml0ID0ge31cclxuICApIHtcclxuICAgIGxvZ2dlci5pbmZvKGBBUEkgUmVxdWVzdDogJHttZXRob2R9ICR7dXJsfWAsIHsgb3B0aW9ucyB9KVxyXG4gICAgXHJcbiAgICB0cnkge1xyXG4gICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IHN1cGVyLnJlcXVlc3Q8VD4obWV0aG9kLCB1cmwsIG9wdGlvbnMpXHJcbiAgICAgIGxvZ2dlci5kZWJ1ZyhgQVBJIFJlc3BvbnNlOiAke21ldGhvZH0gJHt1cmx9YCwgeyByZXNwb25zZSB9KVxyXG4gICAgICByZXR1cm4gcmVzcG9uc2VcclxuICAgIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICAgIGxvZ2dlci5lcnJvcihgQVBJIEVycm9yOiAke21ldGhvZH0gJHt1cmx9YCwgeyBlcnJvciB9KVxyXG4gICAgICB0aHJvdyBlcnJvclxyXG4gICAgfVxyXG4gIH1cclxufVxyXG5cclxuLy8gQ3JlYXRlIGFuZCBleHBvcnQgQVBJIGluc3RhbmNlXHJcbmV4cG9ydCBjb25zdCBhcGkgPSBuZXcgTG9nZ2VkQVBJQ2xpZW50KHtcclxuICByYXRlTGltaXQ6IHtcclxuICAgIG1heFJlcXVlc3RzOiAxMDAsXHJcbiAgICB3aW5kb3dNczogNjAwMDAgLy8gMSBtaW51dGVcclxuICB9XHJcbn0pXHJcblxyXG4vLyBFeHBvcnQgdHlwZXNcclxuZXhwb3J0ICogZnJvbSAnLi9jb3JlJ1xyXG5leHBvcnQgKiBmcm9tICcuL2xvZ2dlcicgIl0sIm5hbWVzIjpbIkFQSUNsaWVudCIsIkxvZ2dlciIsImxvZ2dlciIsImdldEluc3RhbmNlIiwiTG9nZ2VkQVBJQ2xpZW50IiwiY29uc3RydWN0b3IiLCJjb25maWciLCJyZXF1ZXN0IiwibWV0aG9kIiwidXJsIiwib3B0aW9ucyIsImluZm8iLCJyZXNwb25zZSIsImRlYnVnIiwiZXJyb3IiLCJhcGkiLCJyYXRlTGltaXQiLCJtYXhSZXF1ZXN0cyIsIndpbmRvd01zIl0sImlnbm9yZUxpc3QiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./src/lib/api/index.ts\n");

/***/ }),

/***/ "(rsc)/./src/lib/api/logger.ts":
/*!*******************************!*\
  !*** ./src/lib/api/logger.ts ***!
  \*******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   LogLevel: () => (/* binding */ LogLevel),\n/* harmony export */   Logger: () => (/* binding */ Logger)\n/* harmony export */ });\n// Log levels\nvar LogLevel = /*#__PURE__*/ function(LogLevel) {\n    LogLevel[\"ERROR\"] = \"ERROR\";\n    LogLevel[\"WARN\"] = \"WARN\";\n    LogLevel[\"INFO\"] = \"INFO\";\n    LogLevel[\"DEBUG\"] = \"DEBUG\";\n    return LogLevel;\n}({});\nclass Logger {\n    constructor(){\n        this.logLevel = \"INFO\";\n    }\n    static getInstance() {\n        if (!Logger.instance) {\n            Logger.instance = new Logger();\n        }\n        return Logger.instance;\n    }\n    setLogLevel(level) {\n        this.logLevel = level;\n    }\n    shouldLog(level) {\n        const levels = Object.values(LogLevel);\n        return levels.indexOf(level) <= levels.indexOf(this.logLevel);\n    }\n    formatLog(level, message, data) {\n        return {\n            timestamp: new Date().toISOString(),\n            level,\n            message,\n            data\n        };\n    }\n    log(level, message, data) {\n        if (!this.shouldLog(level)) return;\n        const logEntry = this.formatLog(level, message, data);\n        switch(level){\n            case \"ERROR\":\n                console.error(logEntry);\n                break;\n            case \"WARN\":\n                console.warn(logEntry);\n                break;\n            case \"INFO\":\n                console.info(logEntry);\n                break;\n            case \"DEBUG\":\n                console.debug(logEntry);\n                break;\n        }\n        // In a production environment, you might want to send logs to a service\n        if (false) {}\n    }\n    error(message, data) {\n        this.log(\"ERROR\", message, data);\n    }\n    warn(message, data) {\n        this.log(\"WARN\", message, data);\n    }\n    info(message, data) {\n        this.log(\"INFO\", message, data);\n    }\n    debug(message, data) {\n        this.log(\"DEBUG\", message, data);\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9zcmMvbGliL2FwaS9sb2dnZXIudHMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxhQUFhO0FBQ04sc0NBQUtBOzs7OztXQUFBQTtNQUtYO0FBU00sTUFBTUM7SUFJWCxhQUFzQjthQUZkQztJQUVlO0lBRXZCLE9BQWNDLGNBQXNCO1FBQ2xDLElBQUksQ0FBQ0YsT0FBT0csUUFBUSxFQUFFO1lBQ3BCSCxPQUFPRyxRQUFRLEdBQUcsSUFBSUg7UUFDeEI7UUFDQSxPQUFPQSxPQUFPRyxRQUFRO0lBQ3hCO0lBRU9DLFlBQVlDLEtBQWUsRUFBRTtRQUNsQyxJQUFJLENBQUNKLFFBQVEsR0FBR0k7SUFDbEI7SUFFUUMsVUFBVUQsS0FBZSxFQUFXO1FBQzFDLE1BQU1FLFNBQVNDLE9BQU9DLE1BQU0sQ0FBQ1Y7UUFDN0IsT0FBT1EsT0FBT0csT0FBTyxDQUFDTCxVQUFVRSxPQUFPRyxPQUFPLENBQUMsSUFBSSxDQUFDVCxRQUFRO0lBQzlEO0lBRVFVLFVBQVVOLEtBQWUsRUFBRU8sT0FBZSxFQUFFQyxJQUFVLEVBQVk7UUFDeEUsT0FBTztZQUNMQyxXQUFXLElBQUlDLE9BQU9DLFdBQVc7WUFDakNYO1lBQ0FPO1lBQ0FDO1FBQ0Y7SUFDRjtJQUVRSSxJQUFJWixLQUFlLEVBQUVPLE9BQWUsRUFBRUMsSUFBVSxFQUFFO1FBQ3hELElBQUksQ0FBQyxJQUFJLENBQUNQLFNBQVMsQ0FBQ0QsUUFBUTtRQUU1QixNQUFNYSxXQUFXLElBQUksQ0FBQ1AsU0FBUyxDQUFDTixPQUFPTyxTQUFTQztRQUVoRCxPQUFRUjtZQUNOO2dCQUNFYyxRQUFRQyxLQUFLLENBQUNGO2dCQUNkO1lBQ0Y7Z0JBQ0VDLFFBQVFFLElBQUksQ0FBQ0g7Z0JBQ2I7WUFDRjtnQkFDRUMsUUFBUUcsSUFBSSxDQUFDSjtnQkFDYjtZQUNGO2dCQUNFQyxRQUFRSSxLQUFLLENBQUNMO2dCQUNkO1FBQ0o7UUFFQSx3RUFBd0U7UUFDeEUsSUFBSU0sS0FBcUMsRUFBRSxFQUUxQztJQUNIO0lBRU9KLE1BQU1SLE9BQWUsRUFBRUMsSUFBVSxFQUFFO1FBQ3hDLElBQUksQ0FBQ0ksR0FBRyxVQUFpQkwsU0FBU0M7SUFDcEM7SUFFT1EsS0FBS1QsT0FBZSxFQUFFQyxJQUFVLEVBQUU7UUFDdkMsSUFBSSxDQUFDSSxHQUFHLFNBQWdCTCxTQUFTQztJQUNuQztJQUVPUyxLQUFLVixPQUFlLEVBQUVDLElBQVUsRUFBRTtRQUN2QyxJQUFJLENBQUNJLEdBQUcsU0FBZ0JMLFNBQVNDO0lBQ25DO0lBRU9VLE1BQU1YLE9BQWUsRUFBRUMsSUFBVSxFQUFFO1FBQ3hDLElBQUksQ0FBQ0ksR0FBRyxVQUFpQkwsU0FBU0M7SUFDcEM7QUFDRiIsInNvdXJjZXMiOlsiQzpcXFVzZXJzXFxHb3Jkb1xcRG9jdW1lbnRzXFxHaXRIdWJcXHJlZGRpdHJlc2VhcmNoXFxzcmNcXGxpYlxcYXBpXFxsb2dnZXIudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gTG9nIGxldmVsc1xyXG5leHBvcnQgZW51bSBMb2dMZXZlbCB7XHJcbiAgRVJST1IgPSAnRVJST1InLFxyXG4gIFdBUk4gPSAnV0FSTicsXHJcbiAgSU5GTyA9ICdJTkZPJyxcclxuICBERUJVRyA9ICdERUJVRycsXHJcbn1cclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgTG9nRW50cnkge1xyXG4gIHRpbWVzdGFtcDogc3RyaW5nXHJcbiAgbGV2ZWw6IExvZ0xldmVsXHJcbiAgbWVzc2FnZTogc3RyaW5nXHJcbiAgZGF0YT86IGFueVxyXG59XHJcblxyXG5leHBvcnQgY2xhc3MgTG9nZ2VyIHtcclxuICBwcml2YXRlIHN0YXRpYyBpbnN0YW5jZTogTG9nZ2VyXHJcbiAgcHJpdmF0ZSBsb2dMZXZlbDogTG9nTGV2ZWwgPSBMb2dMZXZlbC5JTkZPXHJcblxyXG4gIHByaXZhdGUgY29uc3RydWN0b3IoKSB7fVxyXG5cclxuICBwdWJsaWMgc3RhdGljIGdldEluc3RhbmNlKCk6IExvZ2dlciB7XHJcbiAgICBpZiAoIUxvZ2dlci5pbnN0YW5jZSkge1xyXG4gICAgICBMb2dnZXIuaW5zdGFuY2UgPSBuZXcgTG9nZ2VyKClcclxuICAgIH1cclxuICAgIHJldHVybiBMb2dnZXIuaW5zdGFuY2VcclxuICB9XHJcblxyXG4gIHB1YmxpYyBzZXRMb2dMZXZlbChsZXZlbDogTG9nTGV2ZWwpIHtcclxuICAgIHRoaXMubG9nTGV2ZWwgPSBsZXZlbFxyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBzaG91bGRMb2cobGV2ZWw6IExvZ0xldmVsKTogYm9vbGVhbiB7XHJcbiAgICBjb25zdCBsZXZlbHMgPSBPYmplY3QudmFsdWVzKExvZ0xldmVsKVxyXG4gICAgcmV0dXJuIGxldmVscy5pbmRleE9mKGxldmVsKSA8PSBsZXZlbHMuaW5kZXhPZih0aGlzLmxvZ0xldmVsKVxyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBmb3JtYXRMb2cobGV2ZWw6IExvZ0xldmVsLCBtZXNzYWdlOiBzdHJpbmcsIGRhdGE/OiBhbnkpOiBMb2dFbnRyeSB7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICB0aW1lc3RhbXA6IG5ldyBEYXRlKCkudG9JU09TdHJpbmcoKSxcclxuICAgICAgbGV2ZWwsXHJcbiAgICAgIG1lc3NhZ2UsXHJcbiAgICAgIGRhdGEsXHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIGxvZyhsZXZlbDogTG9nTGV2ZWwsIG1lc3NhZ2U6IHN0cmluZywgZGF0YT86IGFueSkge1xyXG4gICAgaWYgKCF0aGlzLnNob3VsZExvZyhsZXZlbCkpIHJldHVyblxyXG5cclxuICAgIGNvbnN0IGxvZ0VudHJ5ID0gdGhpcy5mb3JtYXRMb2cobGV2ZWwsIG1lc3NhZ2UsIGRhdGEpXHJcblxyXG4gICAgc3dpdGNoIChsZXZlbCkge1xyXG4gICAgICBjYXNlIExvZ0xldmVsLkVSUk9SOlxyXG4gICAgICAgIGNvbnNvbGUuZXJyb3IobG9nRW50cnkpXHJcbiAgICAgICAgYnJlYWtcclxuICAgICAgY2FzZSBMb2dMZXZlbC5XQVJOOlxyXG4gICAgICAgIGNvbnNvbGUud2Fybihsb2dFbnRyeSlcclxuICAgICAgICBicmVha1xyXG4gICAgICBjYXNlIExvZ0xldmVsLklORk86XHJcbiAgICAgICAgY29uc29sZS5pbmZvKGxvZ0VudHJ5KVxyXG4gICAgICAgIGJyZWFrXHJcbiAgICAgIGNhc2UgTG9nTGV2ZWwuREVCVUc6XHJcbiAgICAgICAgY29uc29sZS5kZWJ1Zyhsb2dFbnRyeSlcclxuICAgICAgICBicmVha1xyXG4gICAgfVxyXG5cclxuICAgIC8vIEluIGEgcHJvZHVjdGlvbiBlbnZpcm9ubWVudCwgeW91IG1pZ2h0IHdhbnQgdG8gc2VuZCBsb2dzIHRvIGEgc2VydmljZVxyXG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicpIHtcclxuICAgICAgLy8gVE9ETzogSW1wbGVtZW50IHByb2R1Y3Rpb24gbG9nZ2luZyBzZXJ2aWNlIGludGVncmF0aW9uXHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgZXJyb3IobWVzc2FnZTogc3RyaW5nLCBkYXRhPzogYW55KSB7XHJcbiAgICB0aGlzLmxvZyhMb2dMZXZlbC5FUlJPUiwgbWVzc2FnZSwgZGF0YSlcclxuICB9XHJcblxyXG4gIHB1YmxpYyB3YXJuKG1lc3NhZ2U6IHN0cmluZywgZGF0YT86IGFueSkge1xyXG4gICAgdGhpcy5sb2coTG9nTGV2ZWwuV0FSTiwgbWVzc2FnZSwgZGF0YSlcclxuICB9XHJcblxyXG4gIHB1YmxpYyBpbmZvKG1lc3NhZ2U6IHN0cmluZywgZGF0YT86IGFueSkge1xyXG4gICAgdGhpcy5sb2coTG9nTGV2ZWwuSU5GTywgbWVzc2FnZSwgZGF0YSlcclxuICB9XHJcblxyXG4gIHB1YmxpYyBkZWJ1ZyhtZXNzYWdlOiBzdHJpbmcsIGRhdGE/OiBhbnkpIHtcclxuICAgIHRoaXMubG9nKExvZ0xldmVsLkRFQlVHLCBtZXNzYWdlLCBkYXRhKVxyXG4gIH1cclxufSAiXSwibmFtZXMiOlsiTG9nTGV2ZWwiLCJMb2dnZXIiLCJsb2dMZXZlbCIsImdldEluc3RhbmNlIiwiaW5zdGFuY2UiLCJzZXRMb2dMZXZlbCIsImxldmVsIiwic2hvdWxkTG9nIiwibGV2ZWxzIiwiT2JqZWN0IiwidmFsdWVzIiwiaW5kZXhPZiIsImZvcm1hdExvZyIsIm1lc3NhZ2UiLCJkYXRhIiwidGltZXN0YW1wIiwiRGF0ZSIsInRvSVNPU3RyaW5nIiwibG9nIiwibG9nRW50cnkiLCJjb25zb2xlIiwiZXJyb3IiLCJ3YXJuIiwiaW5mbyIsImRlYnVnIiwicHJvY2VzcyJdLCJpZ25vcmVMaXN0IjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./src/lib/api/logger.ts\n");

/***/ }),

/***/ "(rsc)/./src/lib/reddit/client.ts":
/*!**********************************!*\
  !*** ./src/lib/reddit/client.ts ***!
  \**********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   RedditAPIClient: () => (/* binding */ RedditAPIClient)\n/* harmony export */ });\n/* harmony import */ var _api__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../api */ \"(rsc)/./src/lib/api/index.ts\");\n/* harmony import */ var _api_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../api/core */ \"(rsc)/./src/lib/api/core.ts\");\n/* harmony import */ var _api_logger__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../api/logger */ \"(rsc)/./src/lib/api/logger.ts\");\n\n\n\nconst logger = _api_logger__WEBPACK_IMPORTED_MODULE_2__.Logger.getInstance();\nclass RedditAPIClient {\n    constructor(){\n        this.baseUrl = 'https://www.reddit.com';\n        this.apiVersion = 'v1';\n    }\n    getApiUrl(endpoint) {\n        return `${this.baseUrl}/api/${this.apiVersion}/${endpoint}`;\n    }\n    normalizePost(post) {\n        const data = post.data || post;\n        return {\n            id: data.id,\n            title: data.title,\n            content: data.selftext,\n            author: data.author,\n            subreddit: data.subreddit,\n            score: data.score,\n            upvoteRatio: data.upvote_ratio,\n            createdAt: new Date(data.created_utc * 1000),\n            commentCount: data.num_comments,\n            url: data.url,\n            isOriginalContent: data.is_self,\n            isVideo: data.is_video,\n            isStickied: data.stickied,\n            metadata: {\n                permalink: data.permalink\n            }\n        };\n    }\n    normalizeComment(comment) {\n        const data = comment.data || comment;\n        return {\n            id: data.id,\n            content: data.body,\n            author: data.author,\n            score: data.score,\n            createdAt: new Date(data.created_utc * 1000),\n            postId: data.link_id?.replace('t3_', ''),\n            parentCommentId: data.parent_id?.replace('t1_', ''),\n            depth: data.depth,\n            metadata: {\n                permalink: data.permalink\n            }\n        };\n    }\n    normalizeSubreddit(subreddit) {\n        const data = subreddit.data || subreddit;\n        return {\n            id: data.id,\n            name: data.display_name,\n            title: data.title,\n            description: data.description,\n            subscriberCount: data.subscribers,\n            createdAt: new Date(data.created_utc * 1000),\n            isNsfw: data.over18,\n            publicDescription: data.public_description,\n            metadata: {\n            }\n        };\n    }\n    async getSubredditPosts(subreddit, sort = 'hot', limit = 25) {\n        try {\n            const response = await _api__WEBPACK_IMPORTED_MODULE_0__.api.get(`${this.baseUrl}/r/${subreddit}/${sort}.json?limit=${limit}`);\n            if (!response.data?.data?.children) {\n                throw new _api_core__WEBPACK_IMPORTED_MODULE_1__.APIError('Invalid response from Reddit API', 500, 'REDDIT_API_ERROR');\n            }\n            return response.data.data.children.map((post)=>this.normalizePost(post));\n        } catch (error) {\n            logger.error('Failed to fetch subreddit posts', {\n                subreddit,\n                error\n            });\n            throw error;\n        }\n    }\n    async getPost(postId) {\n        try {\n            const response = await _api__WEBPACK_IMPORTED_MODULE_0__.api.get(`${this.baseUrl}/comments/${postId}.json`);\n            if (!response.data?.[0]?.data?.children?.[0]) {\n                throw new _api_core__WEBPACK_IMPORTED_MODULE_1__.APIError('Post not found', 404, 'POST_NOT_FOUND');\n            }\n            return this.normalizePost(response.data[0].data.children[0]);\n        } catch (error) {\n            logger.error('Failed to fetch post', {\n                postId,\n                error\n            });\n            throw error;\n        }\n    }\n    async getPostComments(postId, sort = 'confidence', limit = 100) {\n        try {\n            const response = await _api__WEBPACK_IMPORTED_MODULE_0__.api.get(`${this.baseUrl}/comments/${postId}.json?sort=${sort}&limit=${limit}`);\n            if (!response.data?.[1]?.data?.children) {\n                throw new _api_core__WEBPACK_IMPORTED_MODULE_1__.APIError('Comments not found', 404, 'COMMENTS_NOT_FOUND');\n            }\n            return response.data[1].data.children.filter((comment)=>comment.kind === 't1').map((comment)=>this.normalizeComment(comment));\n        } catch (error) {\n            logger.error('Failed to fetch post comments', {\n                postId,\n                error\n            });\n            throw error;\n        }\n    }\n    async searchSubreddits(query) {\n        try {\n            const response = await _api__WEBPACK_IMPORTED_MODULE_0__.api.get(`${this.baseUrl}/subreddits/search.json?q=${encodeURIComponent(query)}&limit=25`);\n            if (!response.data?.data?.children) {\n                throw new _api_core__WEBPACK_IMPORTED_MODULE_1__.APIError('Invalid response from Reddit API', 500, 'REDDIT_API_ERROR');\n            }\n            return response.data.data.children.map((subreddit)=>this.normalizeSubreddit(subreddit));\n        } catch (error) {\n            logger.error('Failed to search subreddits', {\n                query,\n                error\n            });\n            throw error;\n        }\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./src/lib/reddit/client.ts\n");

/***/ }),

/***/ "(rsc)/./src/lib/reddit/service.ts":
/*!***********************************!*\
  !*** ./src/lib/reddit/service.ts ***!
  \***********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   RedditService: () => (/* binding */ RedditService)\n/* harmony export */ });\n/* harmony import */ var _supabase_supabase_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @supabase/supabase-js */ \"(rsc)/./node_modules/@supabase/supabase-js/dist/module/index.js\");\n/* harmony import */ var _client__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./client */ \"(rsc)/./src/lib/reddit/client.ts\");\n/* harmony import */ var _api_logger__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../api/logger */ \"(rsc)/./src/lib/api/logger.ts\");\n\n\n\nconst logger = _api_logger__WEBPACK_IMPORTED_MODULE_1__.Logger.getInstance();\nconst redditClient = new _client__WEBPACK_IMPORTED_MODULE_0__.RedditAPIClient();\n// Initialize Supabase client\nconst supabase = (0,_supabase_supabase_js__WEBPACK_IMPORTED_MODULE_2__.createClient)(\"https://ubyblzuivxnzuchfektk.supabase.co\", \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InVieWJsenVpdnhuenVjaGZla3RrIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDMyMTQxMzksImV4cCI6MjA1ODc5MDEzOX0.HJQJcsfUrDoeTzDRN0k8ptNKpu8fSyN1XOPhzlmEtTI\");\nclass RedditService {\n    // Post-related methods\n    async fetchAndStoreSubredditPosts(subreddit, sort = 'hot', limit = 25) {\n        try {\n            // Fetch posts from Reddit\n            const posts = await redditClient.getSubredditPosts(subreddit, sort, limit);\n            // Store posts in database\n            const { data, error } = await supabase.from('reddit_posts').upsert(posts.map((post)=>({\n                    ...post,\n                    metadata: JSON.stringify(post.metadata)\n                })), {\n                onConflict: 'id'\n            });\n            if (error) {\n                logger.error('Failed to store posts in database', {\n                    error\n                });\n                throw error;\n            }\n            return posts;\n        } catch (error) {\n            logger.error('Failed to fetch and store subreddit posts', {\n                subreddit,\n                error\n            });\n            throw error;\n        }\n    }\n    async fetchAndStorePostWithComments(postId, commentSort = 'confidence', commentLimit = 100) {\n        try {\n            // Fetch post and comments concurrently\n            const [post, comments] = await Promise.all([\n                redditClient.getPost(postId),\n                redditClient.getPostComments(postId, commentSort, commentLimit)\n            ]);\n            // Store post and comments in database\n            await Promise.all([\n                supabase.from('reddit_posts').upsert({\n                    ...post,\n                    metadata: JSON.stringify(post.metadata)\n                }, {\n                    onConflict: 'id'\n                }),\n                supabase.from('reddit_comments').upsert(comments.map((comment)=>({\n                        ...comment,\n                        metadata: JSON.stringify(comment.metadata)\n                    })), {\n                    onConflict: 'id'\n                })\n            ]);\n            return {\n                post,\n                comments\n            };\n        } catch (error) {\n            logger.error('Failed to fetch and store post with comments', {\n                postId,\n                error\n            });\n            throw error;\n        }\n    }\n    // Subreddit-related methods\n    async searchAndStoreSubreddits(query) {\n        try {\n            // Search for subreddits\n            const subreddits = await redditClient.searchSubreddits(query);\n            // Store subreddits in database\n            const { error } = await supabase.from('subreddits').upsert(subreddits.map((subreddit)=>({\n                    ...subreddit,\n                    metadata: JSON.stringify(subreddit.metadata)\n                })), {\n                onConflict: 'id'\n            });\n            if (error) {\n                logger.error('Failed to store subreddits in database', {\n                    error\n                });\n                throw error;\n            }\n            return subreddits;\n        } catch (error) {\n            logger.error('Failed to search and store subreddits', {\n                query,\n                error\n            });\n            throw error;\n        }\n    }\n    // Database query methods\n    async getStoredPosts(subreddit, limit = 25, offset = 0) {\n        try {\n            let query = supabase.from('reddit_posts').select('*').order('createdAt', {\n                ascending: false\n            }).limit(limit).range(offset, offset + limit - 1);\n            if (subreddit) {\n                query = query.eq('subreddit', subreddit);\n            }\n            const { data, error } = await query;\n            if (error) throw error;\n            return data.map((post)=>({\n                    ...post,\n                    metadata: JSON.parse(post.metadata)\n                }));\n        } catch (error) {\n            logger.error('Failed to get stored posts', {\n                subreddit,\n                error\n            });\n            throw error;\n        }\n    }\n    async getStoredComments(postId, limit = 100, offset = 0) {\n        try {\n            const { data, error } = await supabase.from('reddit_comments').select('*').eq('postId', postId).order('score', {\n                ascending: false\n            }).limit(limit).range(offset, offset + limit - 1);\n            if (error) throw error;\n            return data.map((comment)=>({\n                    ...comment,\n                    metadata: JSON.parse(comment.metadata)\n                }));\n        } catch (error) {\n            logger.error('Failed to get stored comments', {\n                postId,\n                error\n            });\n            throw error;\n        }\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./src/lib/reddit/service.ts\n");

/***/ }),

/***/ "(ssr)/./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?server=true!":
/*!******************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?server=true! ***!
  \******************************************************************************************************/
/***/ (() => {



/***/ }),

/***/ "../app-render/after-task-async-storage.external":
/*!***********************************************************************************!*\
  !*** external "next/dist/server/app-render/after-task-async-storage.external.js" ***!
  \***********************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/server/app-render/after-task-async-storage.external.js");

/***/ }),

/***/ "../app-render/work-async-storage.external":
/*!*****************************************************************************!*\
  !*** external "next/dist/server/app-render/work-async-storage.external.js" ***!
  \*****************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/server/app-render/work-async-storage.external.js");

/***/ }),

/***/ "./work-unit-async-storage.external":
/*!**********************************************************************************!*\
  !*** external "next/dist/server/app-render/work-unit-async-storage.external.js" ***!
  \**********************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/server/app-render/work-unit-async-storage.external.js");

/***/ }),

/***/ "buffer":
/*!*************************!*\
  !*** external "buffer" ***!
  \*************************/
/***/ ((module) => {

"use strict";
module.exports = require("buffer");

/***/ }),

/***/ "crypto":
/*!*************************!*\
  !*** external "crypto" ***!
  \*************************/
/***/ ((module) => {

"use strict";
module.exports = require("crypto");

/***/ }),

/***/ "events":
/*!*************************!*\
  !*** external "events" ***!
  \*************************/
/***/ ((module) => {

"use strict";
module.exports = require("events");

/***/ }),

/***/ "http":
/*!***********************!*\
  !*** external "http" ***!
  \***********************/
/***/ ((module) => {

"use strict";
module.exports = require("http");

/***/ }),

/***/ "https":
/*!************************!*\
  !*** external "https" ***!
  \************************/
/***/ ((module) => {

"use strict";
module.exports = require("https");

/***/ }),

/***/ "net":
/*!**********************!*\
  !*** external "net" ***!
  \**********************/
/***/ ((module) => {

"use strict";
module.exports = require("net");

/***/ }),

/***/ "next/dist/compiled/next-server/app-page.runtime.dev.js":
/*!*************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-page.runtime.dev.js" ***!
  \*************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/compiled/next-server/app-page.runtime.dev.js");

/***/ }),

/***/ "next/dist/compiled/next-server/app-route.runtime.dev.js":
/*!**************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-route.runtime.dev.js" ***!
  \**************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/compiled/next-server/app-route.runtime.dev.js");

/***/ }),

/***/ "punycode":
/*!***************************!*\
  !*** external "punycode" ***!
  \***************************/
/***/ ((module) => {

"use strict";
module.exports = require("punycode");

/***/ }),

/***/ "stream":
/*!*************************!*\
  !*** external "stream" ***!
  \*************************/
/***/ ((module) => {

"use strict";
module.exports = require("stream");

/***/ }),

/***/ "tls":
/*!**********************!*\
  !*** external "tls" ***!
  \**********************/
/***/ ((module) => {

"use strict";
module.exports = require("tls");

/***/ }),

/***/ "url":
/*!**********************!*\
  !*** external "url" ***!
  \**********************/
/***/ ((module) => {

"use strict";
module.exports = require("url");

/***/ }),

/***/ "zlib":
/*!***********************!*\
  !*** external "zlib" ***!
  \***********************/
/***/ ((module) => {

"use strict";
module.exports = require("zlib");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../../../webpack-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendor-chunks/next","vendor-chunks/@supabase","vendor-chunks/tr46","vendor-chunks/@opentelemetry","vendor-chunks/whatwg-url","vendor-chunks/webidl-conversions","vendor-chunks/jose","vendor-chunks/zod","vendor-chunks/set-cookie-parser"], () => (__webpack_exec__("(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader/index.js?name=app%2Fapi%2Freddit%2Fposts%2Froute&page=%2Fapi%2Freddit%2Fposts%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Freddit%2Fposts%2Froute.ts&appDir=C%3A%5CUsers%5CGordo%5CDocuments%5CGitHub%5Credditresearch%5Csrc%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=C%3A%5CUsers%5CGordo%5CDocuments%5CGitHub%5Credditresearch&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!")));
module.exports = __webpack_exports__;

})();